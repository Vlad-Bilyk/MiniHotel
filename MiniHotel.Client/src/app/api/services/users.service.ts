/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { UserDto } from '../models/user-dto';
import { usersDeleteUser } from '../fn/users/users-delete-user';
import { UsersDeleteUser$Params } from '../fn/users/users-delete-user';
import { usersGetUserById } from '../fn/users/users-get-user-by-id';
import { UsersGetUserById$Params } from '../fn/users/users-get-user-by-id';
import { usersGetUsers } from '../fn/users/users-get-users';
import { UsersGetUsers$Params } from '../fn/users/users-get-users';
import { usersGetUsers$Plain } from '../fn/users/users-get-users-plain';
import { UsersGetUsers$Plain$Params } from '../fn/users/users-get-users-plain';
import { usersUpdateUser } from '../fn/users/users-update-user';
import { UsersUpdateUser$Params } from '../fn/users/users-update-user';

@Injectable({ providedIn: 'root' })
export class UsersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `usersGetUsers()` */
  static readonly UsersGetUsersPath = '/api/Users';

  /**
   * Retrieves all users.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersGetUsers$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersGetUsers$Plain$Response(params?: UsersGetUsers$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return usersGetUsers$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all users.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersGetUsers$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersGetUsers$Plain(params?: UsersGetUsers$Plain$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.usersGetUsers$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /**
   * Retrieves all users.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersGetUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersGetUsers$Response(params?: UsersGetUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return usersGetUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all users.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersGetUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersGetUsers(params?: UsersGetUsers$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.usersGetUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `usersGetUserById()` */
  static readonly UsersGetUserByIdPath = '/api/Users/{id}';

  /**
   * Retrieves a user by their unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersGetUserById()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersGetUserById$Response(params: UsersGetUserById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return usersGetUserById(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves a user by their unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersGetUserById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersGetUserById(params: UsersGetUserById$Params, context?: HttpContext): Observable<void> {
    return this.usersGetUserById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `usersUpdateUser()` */
  static readonly UsersUpdateUserPath = '/api/Users/{id}';

  /**
   * Updates a user's information.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersUpdateUser()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  usersUpdateUser$Response(params: UsersUpdateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return usersUpdateUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates a user's information.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersUpdateUser$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  usersUpdateUser(params: UsersUpdateUser$Params, context?: HttpContext): Observable<void> {
    return this.usersUpdateUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `usersDeleteUser()` */
  static readonly UsersDeleteUserPath = '/api/Users/{id}';

  /**
   * Deletes a user by their unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersDeleteUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersDeleteUser$Response(params: UsersDeleteUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return usersDeleteUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Deletes a user by their unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersDeleteUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersDeleteUser(params: UsersDeleteUser$Params, context?: HttpContext): Observable<void> {
    return this.usersDeleteUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
