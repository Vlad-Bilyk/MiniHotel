/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AuthenticationResultDto } from '../models/authentication-result-dto';
import { authLogin } from '../fn/auth/auth-login';
import { AuthLogin$Params } from '../fn/auth/auth-login';
import { authLogin$Plain } from '../fn/auth/auth-login-plain';
import { AuthLogin$Plain$Params } from '../fn/auth/auth-login-plain';
import { authRegister } from '../fn/auth/auth-register';
import { AuthRegister$Params } from '../fn/auth/auth-register';
import { authRegister$Plain } from '../fn/auth/auth-register-plain';
import { AuthRegister$Plain$Params } from '../fn/auth/auth-register-plain';

@Injectable({ providedIn: 'root' })
export class AuthService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `authRegister()` */
  static readonly AuthRegisterPath = '/api/Auth/register';

  /**
   * Registers a new user based on provided registration details.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authRegister$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  authRegister$Plain$Response(params?: AuthRegister$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthenticationResultDto>> {
    return authRegister$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Registers a new user based on provided registration details.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authRegister$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  authRegister$Plain(params?: AuthRegister$Plain$Params, context?: HttpContext): Observable<AuthenticationResultDto> {
    return this.authRegister$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthenticationResultDto>): AuthenticationResultDto => r.body)
    );
  }

  /**
   * Registers a new user based on provided registration details.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authRegister()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  authRegister$Response(params?: AuthRegister$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthenticationResultDto>> {
    return authRegister(this.http, this.rootUrl, params, context);
  }

  /**
   * Registers a new user based on provided registration details.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authRegister$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  authRegister(params?: AuthRegister$Params, context?: HttpContext): Observable<AuthenticationResultDto> {
    return this.authRegister$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthenticationResultDto>): AuthenticationResultDto => r.body)
    );
  }

  /** Path part for operation `authLogin()` */
  static readonly AuthLoginPath = '/api/Auth/login';

  /**
   * Authenticates an existing user using email and password.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authLogin$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  authLogin$Plain$Response(params?: AuthLogin$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthenticationResultDto>> {
    return authLogin$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Authenticates an existing user using email and password.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authLogin$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  authLogin$Plain(params?: AuthLogin$Plain$Params, context?: HttpContext): Observable<AuthenticationResultDto> {
    return this.authLogin$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthenticationResultDto>): AuthenticationResultDto => r.body)
    );
  }

  /**
   * Authenticates an existing user using email and password.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authLogin()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  authLogin$Response(params?: AuthLogin$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthenticationResultDto>> {
    return authLogin(this.http, this.rootUrl, params, context);
  }

  /**
   * Authenticates an existing user using email and password.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authLogin$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  authLogin(params?: AuthLogin$Params, context?: HttpContext): Observable<AuthenticationResultDto> {
    return this.authLogin$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthenticationResultDto>): AuthenticationResultDto => r.body)
    );
  }

}
