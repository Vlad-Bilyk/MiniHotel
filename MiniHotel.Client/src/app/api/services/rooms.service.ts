/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { RoomDto } from '../models/room-dto';
import { roomsCreateRoom } from '../fn/rooms/rooms-create-room';
import { RoomsCreateRoom$Params } from '../fn/rooms/rooms-create-room';
import { roomsCreateRoom$Plain } from '../fn/rooms/rooms-create-room-plain';
import { RoomsCreateRoom$Plain$Params } from '../fn/rooms/rooms-create-room-plain';
import { roomsDeleteRoom } from '../fn/rooms/rooms-delete-room';
import { RoomsDeleteRoom$Params } from '../fn/rooms/rooms-delete-room';
import { roomsGetAvailableRooms } from '../fn/rooms/rooms-get-available-rooms';
import { RoomsGetAvailableRooms$Params } from '../fn/rooms/rooms-get-available-rooms';
import { roomsGetAvailableRooms$Plain } from '../fn/rooms/rooms-get-available-rooms-plain';
import { RoomsGetAvailableRooms$Plain$Params } from '../fn/rooms/rooms-get-available-rooms-plain';
import { roomsGetRoomById } from '../fn/rooms/rooms-get-room-by-id';
import { RoomsGetRoomById$Params } from '../fn/rooms/rooms-get-room-by-id';
import { roomsGetRooms } from '../fn/rooms/rooms-get-rooms';
import { RoomsGetRooms$Params } from '../fn/rooms/rooms-get-rooms';
import { roomsGetRooms$Plain } from '../fn/rooms/rooms-get-rooms-plain';
import { RoomsGetRooms$Plain$Params } from '../fn/rooms/rooms-get-rooms-plain';
import { roomsUpdateRoom } from '../fn/rooms/rooms-update-room';
import { RoomsUpdateRoom$Params } from '../fn/rooms/rooms-update-room';
import { roomsUpdateStatus } from '../fn/rooms/rooms-update-status';
import { RoomsUpdateStatus$Params } from '../fn/rooms/rooms-update-status';
import { roomsUpdateStatus$Plain } from '../fn/rooms/rooms-update-status-plain';
import { RoomsUpdateStatus$Plain$Params } from '../fn/rooms/rooms-update-status-plain';

@Injectable({ providedIn: 'root' })
export class RoomsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `roomsGetRooms()` */
  static readonly RoomsGetRoomsPath = '/api/Rooms';

  /**
   * Retrieves all hotel rooms.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roomsGetRooms$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsGetRooms$Plain$Response(params?: RoomsGetRooms$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RoomDto>>> {
    return roomsGetRooms$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all hotel rooms.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roomsGetRooms$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsGetRooms$Plain(params?: RoomsGetRooms$Plain$Params, context?: HttpContext): Observable<Array<RoomDto>> {
    return this.roomsGetRooms$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RoomDto>>): Array<RoomDto> => r.body)
    );
  }

  /**
   * Retrieves all hotel rooms.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roomsGetRooms()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsGetRooms$Response(params?: RoomsGetRooms$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RoomDto>>> {
    return roomsGetRooms(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all hotel rooms.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roomsGetRooms$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsGetRooms(params?: RoomsGetRooms$Params, context?: HttpContext): Observable<Array<RoomDto>> {
    return this.roomsGetRooms$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RoomDto>>): Array<RoomDto> => r.body)
    );
  }

  /** Path part for operation `roomsCreateRoom()` */
  static readonly RoomsCreateRoomPath = '/api/Rooms';

  /**
   * Creates a new room.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roomsCreateRoom$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  roomsCreateRoom$Plain$Response(params?: RoomsCreateRoom$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<RoomDto>> {
    return roomsCreateRoom$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new room.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roomsCreateRoom$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  roomsCreateRoom$Plain(params?: RoomsCreateRoom$Plain$Params, context?: HttpContext): Observable<RoomDto> {
    return this.roomsCreateRoom$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoomDto>): RoomDto => r.body)
    );
  }

  /**
   * Creates a new room.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roomsCreateRoom()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  roomsCreateRoom$Response(params?: RoomsCreateRoom$Params, context?: HttpContext): Observable<StrictHttpResponse<RoomDto>> {
    return roomsCreateRoom(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new room.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roomsCreateRoom$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  roomsCreateRoom(params?: RoomsCreateRoom$Params, context?: HttpContext): Observable<RoomDto> {
    return this.roomsCreateRoom$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoomDto>): RoomDto => r.body)
    );
  }

  /** Path part for operation `roomsGetRoomById()` */
  static readonly RoomsGetRoomByIdPath = '/api/Rooms/{id}';

  /**
   * Retrieves a room by its unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roomsGetRoomById()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsGetRoomById$Response(params: RoomsGetRoomById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return roomsGetRoomById(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves a room by its unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roomsGetRoomById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsGetRoomById(params: RoomsGetRoomById$Params, context?: HttpContext): Observable<void> {
    return this.roomsGetRoomById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `roomsUpdateRoom()` */
  static readonly RoomsUpdateRoomPath = '/api/Rooms/{id}';

  /**
   * Updates an existing room.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roomsUpdateRoom()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  roomsUpdateRoom$Response(params: RoomsUpdateRoom$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return roomsUpdateRoom(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates an existing room.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roomsUpdateRoom$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  roomsUpdateRoom(params: RoomsUpdateRoom$Params, context?: HttpContext): Observable<void> {
    return this.roomsUpdateRoom$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `roomsDeleteRoom()` */
  static readonly RoomsDeleteRoomPath = '/api/Rooms/{id}';

  /**
   * Deletes a room by its unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roomsDeleteRoom()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsDeleteRoom$Response(params: RoomsDeleteRoom$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return roomsDeleteRoom(this.http, this.rootUrl, params, context);
  }

  /**
   * Deletes a room by its unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roomsDeleteRoom$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsDeleteRoom(params: RoomsDeleteRoom$Params, context?: HttpContext): Observable<void> {
    return this.roomsDeleteRoom$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `roomsGetAvailableRooms()` */
  static readonly RoomsGetAvailableRoomsPath = '/api/Rooms/available/{startDate}/{endDate}';

  /**
   * Retrieves available rooms for the specified date range.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roomsGetAvailableRooms$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsGetAvailableRooms$Plain$Response(params: RoomsGetAvailableRooms$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RoomDto>>> {
    return roomsGetAvailableRooms$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves available rooms for the specified date range.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roomsGetAvailableRooms$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsGetAvailableRooms$Plain(params: RoomsGetAvailableRooms$Plain$Params, context?: HttpContext): Observable<Array<RoomDto>> {
    return this.roomsGetAvailableRooms$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RoomDto>>): Array<RoomDto> => r.body)
    );
  }

  /**
   * Retrieves available rooms for the specified date range.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roomsGetAvailableRooms()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsGetAvailableRooms$Response(params: RoomsGetAvailableRooms$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RoomDto>>> {
    return roomsGetAvailableRooms(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves available rooms for the specified date range.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roomsGetAvailableRooms$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsGetAvailableRooms(params: RoomsGetAvailableRooms$Params, context?: HttpContext): Observable<Array<RoomDto>> {
    return this.roomsGetAvailableRooms$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RoomDto>>): Array<RoomDto> => r.body)
    );
  }

  /** Path part for operation `roomsUpdateStatus()` */
  static readonly RoomsUpdateStatusPath = '/api/Rooms/{id}/status';

  /**
   * Updates the status of a room.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roomsUpdateStatus$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsUpdateStatus$Plain$Response(params: RoomsUpdateStatus$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<RoomDto>> {
    return roomsUpdateStatus$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates the status of a room.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roomsUpdateStatus$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsUpdateStatus$Plain(params: RoomsUpdateStatus$Plain$Params, context?: HttpContext): Observable<RoomDto> {
    return this.roomsUpdateStatus$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoomDto>): RoomDto => r.body)
    );
  }

  /**
   * Updates the status of a room.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roomsUpdateStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsUpdateStatus$Response(params: RoomsUpdateStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<RoomDto>> {
    return roomsUpdateStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates the status of a room.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roomsUpdateStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsUpdateStatus(params: RoomsUpdateStatus$Params, context?: HttpContext): Observable<RoomDto> {
    return this.roomsUpdateStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoomDto>): RoomDto => r.body)
    );
  }

}
