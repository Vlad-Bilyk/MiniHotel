/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createRoom } from '../fn/rooms/create-room';
import { CreateRoom$Params } from '../fn/rooms/create-room';
import { createRoom$Plain } from '../fn/rooms/create-room-plain';
import { CreateRoom$Plain$Params } from '../fn/rooms/create-room-plain';
import { getAvailableRooms } from '../fn/rooms/get-available-rooms';
import { GetAvailableRooms$Params } from '../fn/rooms/get-available-rooms';
import { getAvailableRooms$Plain } from '../fn/rooms/get-available-rooms-plain';
import { GetAvailableRooms$Plain$Params } from '../fn/rooms/get-available-rooms-plain';
import { getRoomById } from '../fn/rooms/get-room-by-id';
import { GetRoomById$Params } from '../fn/rooms/get-room-by-id';
import { getRooms } from '../fn/rooms/get-rooms';
import { GetRooms$Params } from '../fn/rooms/get-rooms';
import { getRooms$Plain } from '../fn/rooms/get-rooms-plain';
import { GetRooms$Plain$Params } from '../fn/rooms/get-rooms-plain';
import { RoomDto } from '../models/room-dto';
import { updateRoom } from '../fn/rooms/update-room';
import { UpdateRoom$Params } from '../fn/rooms/update-room';
import { updateRoomStatus } from '../fn/rooms/update-room-status';
import { UpdateRoomStatus$Params } from '../fn/rooms/update-room-status';
import { updateRoomStatus$Plain } from '../fn/rooms/update-room-status-plain';
import { UpdateRoomStatus$Plain$Params } from '../fn/rooms/update-room-status-plain';

@Injectable({ providedIn: 'root' })
export class RoomsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getRooms()` */
  static readonly GetRoomsPath = '/api/Rooms';

  /**
   * Retrieves all hotel rooms.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRooms$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRooms$Plain$Response(params?: GetRooms$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RoomDto>>> {
    return getRooms$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all hotel rooms.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRooms$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRooms$Plain(params?: GetRooms$Plain$Params, context?: HttpContext): Observable<Array<RoomDto>> {
    return this.getRooms$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RoomDto>>): Array<RoomDto> => r.body)
    );
  }

  /**
   * Retrieves all hotel rooms.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRooms()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRooms$Response(params?: GetRooms$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RoomDto>>> {
    return getRooms(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all hotel rooms.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRooms$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRooms(params?: GetRooms$Params, context?: HttpContext): Observable<Array<RoomDto>> {
    return this.getRooms$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RoomDto>>): Array<RoomDto> => r.body)
    );
  }

  /** Path part for operation `createRoom()` */
  static readonly CreateRoomPath = '/api/Rooms';

  /**
   * Creates a new room.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createRoom$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createRoom$Plain$Response(params?: CreateRoom$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<RoomDto>> {
    return createRoom$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new room.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createRoom$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createRoom$Plain(params?: CreateRoom$Plain$Params, context?: HttpContext): Observable<RoomDto> {
    return this.createRoom$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoomDto>): RoomDto => r.body)
    );
  }

  /**
   * Creates a new room.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createRoom()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createRoom$Response(params?: CreateRoom$Params, context?: HttpContext): Observable<StrictHttpResponse<RoomDto>> {
    return createRoom(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new room.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createRoom$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createRoom(params?: CreateRoom$Params, context?: HttpContext): Observable<RoomDto> {
    return this.createRoom$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoomDto>): RoomDto => r.body)
    );
  }

  /** Path part for operation `getRoomById()` */
  static readonly GetRoomByIdPath = '/api/Rooms/{id}';

  /**
   * Retrieves a room by its unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRoomById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoomById$Response(params: GetRoomById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return getRoomById(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves a room by its unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRoomById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoomById(params: GetRoomById$Params, context?: HttpContext): Observable<void> {
    return this.getRoomById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateRoom()` */
  static readonly UpdateRoomPath = '/api/Rooms/{id}';

  /**
   * Updates an existing room.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateRoom()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  updateRoom$Response(params: UpdateRoom$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateRoom(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates an existing room.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateRoom$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  updateRoom(params: UpdateRoom$Params, context?: HttpContext): Observable<void> {
    return this.updateRoom$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAvailableRooms()` */
  static readonly GetAvailableRoomsPath = '/api/Rooms/available/{startDate}/{endDate}';

  /**
   * Retrieves available rooms for the specified date range.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAvailableRooms$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvailableRooms$Plain$Response(params: GetAvailableRooms$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RoomDto>>> {
    return getAvailableRooms$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves available rooms for the specified date range.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAvailableRooms$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvailableRooms$Plain(params: GetAvailableRooms$Plain$Params, context?: HttpContext): Observable<Array<RoomDto>> {
    return this.getAvailableRooms$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RoomDto>>): Array<RoomDto> => r.body)
    );
  }

  /**
   * Retrieves available rooms for the specified date range.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAvailableRooms()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvailableRooms$Response(params: GetAvailableRooms$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RoomDto>>> {
    return getAvailableRooms(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves available rooms for the specified date range.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAvailableRooms$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvailableRooms(params: GetAvailableRooms$Params, context?: HttpContext): Observable<Array<RoomDto>> {
    return this.getAvailableRooms$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RoomDto>>): Array<RoomDto> => r.body)
    );
  }

  /** Path part for operation `updateRoomStatus()` */
  static readonly UpdateRoomStatusPath = '/api/Rooms/{id}/status';

  /**
   * Updates the status of a room.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateRoomStatus$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateRoomStatus$Plain$Response(params: UpdateRoomStatus$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<RoomDto>> {
    return updateRoomStatus$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates the status of a room.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateRoomStatus$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateRoomStatus$Plain(params: UpdateRoomStatus$Plain$Params, context?: HttpContext): Observable<RoomDto> {
    return this.updateRoomStatus$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoomDto>): RoomDto => r.body)
    );
  }

  /**
   * Updates the status of a room.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateRoomStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateRoomStatus$Response(params: UpdateRoomStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<RoomDto>> {
    return updateRoomStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates the status of a room.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateRoomStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateRoomStatus(params: UpdateRoomStatus$Params, context?: HttpContext): Observable<RoomDto> {
    return this.updateRoomStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoomDto>): RoomDto => r.body)
    );
  }

}
