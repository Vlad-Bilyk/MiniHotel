/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ServiceDto } from '../models/service-dto';
import { servicesCreateService } from '../fn/services/services-create-service';
import { ServicesCreateService$Params } from '../fn/services/services-create-service';
import { servicesCreateService$Plain } from '../fn/services/services-create-service-plain';
import { ServicesCreateService$Plain$Params } from '../fn/services/services-create-service-plain';
import { servicesDeleteService } from '../fn/services/services-delete-service';
import { ServicesDeleteService$Params } from '../fn/services/services-delete-service';
import { servicesGetServiceById } from '../fn/services/services-get-service-by-id';
import { ServicesGetServiceById$Params } from '../fn/services/services-get-service-by-id';
import { servicesGetServices } from '../fn/services/services-get-services';
import { ServicesGetServices$Params } from '../fn/services/services-get-services';
import { servicesGetServices$Plain } from '../fn/services/services-get-services-plain';
import { ServicesGetServices$Plain$Params } from '../fn/services/services-get-services-plain';
import { servicesUpdateService } from '../fn/services/services-update-service';
import { ServicesUpdateService$Params } from '../fn/services/services-update-service';

@Injectable({ providedIn: 'root' })
export class ServicesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `servicesGetServices()` */
  static readonly ServicesGetServicesPath = '/api/Services';

  /**
   * Retrieves all additional services.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `servicesGetServices$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  servicesGetServices$Plain$Response(params?: ServicesGetServices$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ServiceDto>>> {
    return servicesGetServices$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all additional services.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `servicesGetServices$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  servicesGetServices$Plain(params?: ServicesGetServices$Plain$Params, context?: HttpContext): Observable<Array<ServiceDto>> {
    return this.servicesGetServices$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ServiceDto>>): Array<ServiceDto> => r.body)
    );
  }

  /**
   * Retrieves all additional services.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `servicesGetServices()` instead.
   *
   * This method doesn't expect any request body.
   */
  servicesGetServices$Response(params?: ServicesGetServices$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ServiceDto>>> {
    return servicesGetServices(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all additional services.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `servicesGetServices$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  servicesGetServices(params?: ServicesGetServices$Params, context?: HttpContext): Observable<Array<ServiceDto>> {
    return this.servicesGetServices$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ServiceDto>>): Array<ServiceDto> => r.body)
    );
  }

  /** Path part for operation `servicesCreateService()` */
  static readonly ServicesCreateServicePath = '/api/Services';

  /**
   * Creates a new additional service.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `servicesCreateService$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  servicesCreateService$Plain$Response(params?: ServicesCreateService$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ServiceDto>> {
    return servicesCreateService$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new additional service.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `servicesCreateService$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  servicesCreateService$Plain(params?: ServicesCreateService$Plain$Params, context?: HttpContext): Observable<ServiceDto> {
    return this.servicesCreateService$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ServiceDto>): ServiceDto => r.body)
    );
  }

  /**
   * Creates a new additional service.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `servicesCreateService()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  servicesCreateService$Response(params?: ServicesCreateService$Params, context?: HttpContext): Observable<StrictHttpResponse<ServiceDto>> {
    return servicesCreateService(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new additional service.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `servicesCreateService$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  servicesCreateService(params?: ServicesCreateService$Params, context?: HttpContext): Observable<ServiceDto> {
    return this.servicesCreateService$Response(params, context).pipe(
      map((r: StrictHttpResponse<ServiceDto>): ServiceDto => r.body)
    );
  }

  /** Path part for operation `servicesGetServiceById()` */
  static readonly ServicesGetServiceByIdPath = '/api/Services/{id}';

  /**
   * Retrieves a specific service by its unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `servicesGetServiceById()` instead.
   *
   * This method doesn't expect any request body.
   */
  servicesGetServiceById$Response(params: ServicesGetServiceById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return servicesGetServiceById(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves a specific service by its unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `servicesGetServiceById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  servicesGetServiceById(params: ServicesGetServiceById$Params, context?: HttpContext): Observable<void> {
    return this.servicesGetServiceById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `servicesUpdateService()` */
  static readonly ServicesUpdateServicePath = '/api/Services/{id}';

  /**
   * Updates an existing service.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `servicesUpdateService()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  servicesUpdateService$Response(params: ServicesUpdateService$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return servicesUpdateService(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates an existing service.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `servicesUpdateService$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  servicesUpdateService(params: ServicesUpdateService$Params, context?: HttpContext): Observable<void> {
    return this.servicesUpdateService$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `servicesDeleteService()` */
  static readonly ServicesDeleteServicePath = '/api/Services/{id}';

  /**
   * Deletes a service by its unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `servicesDeleteService()` instead.
   *
   * This method doesn't expect any request body.
   */
  servicesDeleteService$Response(params: ServicesDeleteService$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return servicesDeleteService(this.http, this.rootUrl, params, context);
  }

  /**
   * Deletes a service by its unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `servicesDeleteService$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  servicesDeleteService(params: ServicesDeleteService$Params, context?: HttpContext): Observable<void> {
    return this.servicesDeleteService$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
