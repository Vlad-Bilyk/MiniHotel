/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createService } from '../fn/services/create-service';
import { CreateService$Params } from '../fn/services/create-service';
import { createService$Plain } from '../fn/services/create-service-plain';
import { CreateService$Plain$Params } from '../fn/services/create-service-plain';
import { deactivate } from '../fn/services/deactivate';
import { Deactivate$Params } from '../fn/services/deactivate';
import { getServiceById } from '../fn/services/get-service-by-id';
import { GetServiceById$Params } from '../fn/services/get-service-by-id';
import { getServices } from '../fn/services/get-services';
import { GetServices$Params } from '../fn/services/get-services';
import { getServices$Plain } from '../fn/services/get-services-plain';
import { GetServices$Plain$Params } from '../fn/services/get-services-plain';
import { reactivate } from '../fn/services/reactivate';
import { Reactivate$Params } from '../fn/services/reactivate';
import { ServiceDto } from '../models/service-dto';
import { updateService } from '../fn/services/update-service';
import { UpdateService$Params } from '../fn/services/update-service';

@Injectable({ providedIn: 'root' })
export class ServicesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getServices()` */
  static readonly GetServicesPath = '/api/Services';

  /**
   * Retrieves all additional services.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getServices$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getServices$Plain$Response(params?: GetServices$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ServiceDto>>> {
    return getServices$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all additional services.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getServices$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getServices$Plain(params?: GetServices$Plain$Params, context?: HttpContext): Observable<Array<ServiceDto>> {
    return this.getServices$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ServiceDto>>): Array<ServiceDto> => r.body)
    );
  }

  /**
   * Retrieves all additional services.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getServices()` instead.
   *
   * This method doesn't expect any request body.
   */
  getServices$Response(params?: GetServices$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ServiceDto>>> {
    return getServices(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all additional services.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getServices$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getServices(params?: GetServices$Params, context?: HttpContext): Observable<Array<ServiceDto>> {
    return this.getServices$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ServiceDto>>): Array<ServiceDto> => r.body)
    );
  }

  /** Path part for operation `createService()` */
  static readonly CreateServicePath = '/api/Services';

  /**
   * Creates a new additional service.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createService$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createService$Plain$Response(params?: CreateService$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ServiceDto>> {
    return createService$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new additional service.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createService$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createService$Plain(params?: CreateService$Plain$Params, context?: HttpContext): Observable<ServiceDto> {
    return this.createService$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ServiceDto>): ServiceDto => r.body)
    );
  }

  /**
   * Creates a new additional service.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createService()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createService$Response(params?: CreateService$Params, context?: HttpContext): Observable<StrictHttpResponse<ServiceDto>> {
    return createService(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new additional service.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createService$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createService(params?: CreateService$Params, context?: HttpContext): Observable<ServiceDto> {
    return this.createService$Response(params, context).pipe(
      map((r: StrictHttpResponse<ServiceDto>): ServiceDto => r.body)
    );
  }

  /** Path part for operation `getServiceById()` */
  static readonly GetServiceByIdPath = '/api/Services/{id}';

  /**
   * Retrieves a specific service by its unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getServiceById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getServiceById$Response(params: GetServiceById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return getServiceById(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves a specific service by its unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getServiceById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getServiceById(params: GetServiceById$Params, context?: HttpContext): Observable<void> {
    return this.getServiceById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateService()` */
  static readonly UpdateServicePath = '/api/Services/{id}';

  /**
   * Updates an existing service.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateService()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  updateService$Response(params: UpdateService$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateService(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates an existing service.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateService$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  updateService(params: UpdateService$Params, context?: HttpContext): Observable<void> {
    return this.updateService$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deactivate()` */
  static readonly DeactivatePath = '/api/Services/{id}/deactivate';

  /**
   * Deactivates the service specified by the given id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deactivate()` instead.
   *
   * This method doesn't expect any request body.
   */
  deactivate$Response(params: Deactivate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deactivate(this.http, this.rootUrl, params, context);
  }

  /**
   * Deactivates the service specified by the given id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deactivate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deactivate(params: Deactivate$Params, context?: HttpContext): Observable<void> {
    return this.deactivate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `reactivate()` */
  static readonly ReactivatePath = '/api/Services/{id}/reactivate';

  /**
   * Reactivates the service specified by the given id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `reactivate()` instead.
   *
   * This method doesn't expect any request body.
   */
  reactivate$Response(params: Reactivate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return reactivate(this.http, this.rootUrl, params, context);
  }

  /**
   * Reactivates the service specified by the given id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `reactivate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  reactivate(params: Reactivate$Params, context?: HttpContext): Observable<void> {
    return this.reactivate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
