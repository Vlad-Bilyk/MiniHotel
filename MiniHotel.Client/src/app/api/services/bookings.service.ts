/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BookingDto } from '../models/booking-dto';
import { bookingsCancelBooking } from '../fn/bookings/bookings-cancel-booking';
import { BookingsCancelBooking$Params } from '../fn/bookings/bookings-cancel-booking';
import { bookingsCancelBooking$Plain } from '../fn/bookings/bookings-cancel-booking-plain';
import { BookingsCancelBooking$Plain$Params } from '../fn/bookings/bookings-cancel-booking-plain';
import { bookingsCheckInBooking } from '../fn/bookings/bookings-check-in-booking';
import { BookingsCheckInBooking$Params } from '../fn/bookings/bookings-check-in-booking';
import { bookingsCheckInBooking$Plain } from '../fn/bookings/bookings-check-in-booking-plain';
import { BookingsCheckInBooking$Plain$Params } from '../fn/bookings/bookings-check-in-booking-plain';
import { bookingsCheckOutBooking } from '../fn/bookings/bookings-check-out-booking';
import { BookingsCheckOutBooking$Params } from '../fn/bookings/bookings-check-out-booking';
import { bookingsCheckOutBooking$Plain } from '../fn/bookings/bookings-check-out-booking-plain';
import { BookingsCheckOutBooking$Plain$Params } from '../fn/bookings/bookings-check-out-booking-plain';
import { bookingsCompletedBooking } from '../fn/bookings/bookings-completed-booking';
import { BookingsCompletedBooking$Params } from '../fn/bookings/bookings-completed-booking';
import { bookingsCompletedBooking$Plain } from '../fn/bookings/bookings-completed-booking-plain';
import { BookingsCompletedBooking$Plain$Params } from '../fn/bookings/bookings-completed-booking-plain';
import { bookingsConfirmedBooking } from '../fn/bookings/bookings-confirmed-booking';
import { BookingsConfirmedBooking$Params } from '../fn/bookings/bookings-confirmed-booking';
import { bookingsConfirmedBooking$Plain } from '../fn/bookings/bookings-confirmed-booking-plain';
import { BookingsConfirmedBooking$Plain$Params } from '../fn/bookings/bookings-confirmed-booking-plain';
import { bookingsCreateBooking } from '../fn/bookings/bookings-create-booking';
import { BookingsCreateBooking$Params } from '../fn/bookings/bookings-create-booking';
import { bookingsCreateBooking$Plain } from '../fn/bookings/bookings-create-booking-plain';
import { BookingsCreateBooking$Plain$Params } from '../fn/bookings/bookings-create-booking-plain';
import { bookingsGetBookingById } from '../fn/bookings/bookings-get-booking-by-id';
import { BookingsGetBookingById$Params } from '../fn/bookings/bookings-get-booking-by-id';
import { bookingsGetBookingById$Plain } from '../fn/bookings/bookings-get-booking-by-id-plain';
import { BookingsGetBookingById$Plain$Params } from '../fn/bookings/bookings-get-booking-by-id-plain';
import { bookingsGetBookings } from '../fn/bookings/bookings-get-bookings';
import { BookingsGetBookings$Params } from '../fn/bookings/bookings-get-bookings';
import { bookingsGetBookings$Plain } from '../fn/bookings/bookings-get-bookings-plain';
import { BookingsGetBookings$Plain$Params } from '../fn/bookings/bookings-get-bookings-plain';

@Injectable({ providedIn: 'root' })
export class BookingsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `bookingsGetBookings()` */
  static readonly BookingsGetBookingsPath = '/api/Bookings';

  /**
   * Retrieves all bookings.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookingsGetBookings$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsGetBookings$Plain$Response(params?: BookingsGetBookings$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BookingDto>>> {
    return bookingsGetBookings$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all bookings.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookingsGetBookings$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsGetBookings$Plain(params?: BookingsGetBookings$Plain$Params, context?: HttpContext): Observable<Array<BookingDto>> {
    return this.bookingsGetBookings$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<BookingDto>>): Array<BookingDto> => r.body)
    );
  }

  /**
   * Retrieves all bookings.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookingsGetBookings()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsGetBookings$Response(params?: BookingsGetBookings$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BookingDto>>> {
    return bookingsGetBookings(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all bookings.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookingsGetBookings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsGetBookings(params?: BookingsGetBookings$Params, context?: HttpContext): Observable<Array<BookingDto>> {
    return this.bookingsGetBookings$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<BookingDto>>): Array<BookingDto> => r.body)
    );
  }

  /** Path part for operation `bookingsCreateBooking()` */
  static readonly BookingsCreateBookingPath = '/api/Bookings';

  /**
   * Creates a new booking.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookingsCreateBooking$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  bookingsCreateBooking$Plain$Response(params?: BookingsCreateBooking$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return bookingsCreateBooking$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new booking.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookingsCreateBooking$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  bookingsCreateBooking$Plain(params?: BookingsCreateBooking$Plain$Params, context?: HttpContext): Observable<BookingDto> {
    return this.bookingsCreateBooking$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /**
   * Creates a new booking.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookingsCreateBooking()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  bookingsCreateBooking$Response(params?: BookingsCreateBooking$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return bookingsCreateBooking(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new booking.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookingsCreateBooking$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  bookingsCreateBooking(params?: BookingsCreateBooking$Params, context?: HttpContext): Observable<BookingDto> {
    return this.bookingsCreateBooking$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /** Path part for operation `bookingsGetBookingById()` */
  static readonly BookingsGetBookingByIdPath = '/api/Bookings/{id}';

  /**
   * Retrieves a booking by its unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookingsGetBookingById$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsGetBookingById$Plain$Response(params: BookingsGetBookingById$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return bookingsGetBookingById$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves a booking by its unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookingsGetBookingById$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsGetBookingById$Plain(params: BookingsGetBookingById$Plain$Params, context?: HttpContext): Observable<BookingDto> {
    return this.bookingsGetBookingById$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /**
   * Retrieves a booking by its unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookingsGetBookingById()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsGetBookingById$Response(params: BookingsGetBookingById$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return bookingsGetBookingById(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves a booking by its unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookingsGetBookingById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsGetBookingById(params: BookingsGetBookingById$Params, context?: HttpContext): Observable<BookingDto> {
    return this.bookingsGetBookingById$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /** Path part for operation `bookingsCancelBooking()` */
  static readonly BookingsCancelBookingPath = '/api/Bookings/{id}/cancel';

  /**
   * Cancels an existing booking.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookingsCancelBooking$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsCancelBooking$Plain$Response(params: BookingsCancelBooking$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return bookingsCancelBooking$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Cancels an existing booking.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookingsCancelBooking$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsCancelBooking$Plain(params: BookingsCancelBooking$Plain$Params, context?: HttpContext): Observable<BookingDto> {
    return this.bookingsCancelBooking$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /**
   * Cancels an existing booking.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookingsCancelBooking()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsCancelBooking$Response(params: BookingsCancelBooking$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return bookingsCancelBooking(this.http, this.rootUrl, params, context);
  }

  /**
   * Cancels an existing booking.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookingsCancelBooking$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsCancelBooking(params: BookingsCancelBooking$Params, context?: HttpContext): Observable<BookingDto> {
    return this.bookingsCancelBooking$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /** Path part for operation `bookingsCheckInBooking()` */
  static readonly BookingsCheckInBookingPath = '/api/Bookings/{id}/checkin';

  /**
   * Marks a booking as checked in.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookingsCheckInBooking$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsCheckInBooking$Plain$Response(params: BookingsCheckInBooking$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return bookingsCheckInBooking$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Marks a booking as checked in.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookingsCheckInBooking$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsCheckInBooking$Plain(params: BookingsCheckInBooking$Plain$Params, context?: HttpContext): Observable<BookingDto> {
    return this.bookingsCheckInBooking$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /**
   * Marks a booking as checked in.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookingsCheckInBooking()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsCheckInBooking$Response(params: BookingsCheckInBooking$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return bookingsCheckInBooking(this.http, this.rootUrl, params, context);
  }

  /**
   * Marks a booking as checked in.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookingsCheckInBooking$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsCheckInBooking(params: BookingsCheckInBooking$Params, context?: HttpContext): Observable<BookingDto> {
    return this.bookingsCheckInBooking$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /** Path part for operation `bookingsCheckOutBooking()` */
  static readonly BookingsCheckOutBookingPath = '/api/Bookings/{id}/checkout';

  /**
   * Marks a booking as checked out.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookingsCheckOutBooking$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsCheckOutBooking$Plain$Response(params: BookingsCheckOutBooking$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return bookingsCheckOutBooking$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Marks a booking as checked out.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookingsCheckOutBooking$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsCheckOutBooking$Plain(params: BookingsCheckOutBooking$Plain$Params, context?: HttpContext): Observable<BookingDto> {
    return this.bookingsCheckOutBooking$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /**
   * Marks a booking as checked out.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookingsCheckOutBooking()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsCheckOutBooking$Response(params: BookingsCheckOutBooking$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return bookingsCheckOutBooking(this.http, this.rootUrl, params, context);
  }

  /**
   * Marks a booking as checked out.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookingsCheckOutBooking$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsCheckOutBooking(params: BookingsCheckOutBooking$Params, context?: HttpContext): Observable<BookingDto> {
    return this.bookingsCheckOutBooking$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /** Path part for operation `bookingsConfirmedBooking()` */
  static readonly BookingsConfirmedBookingPath = '/api/Bookings/{id}/confirmed';

  /**
   * Confirms an existing booking.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookingsConfirmedBooking$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsConfirmedBooking$Plain$Response(params: BookingsConfirmedBooking$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return bookingsConfirmedBooking$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Confirms an existing booking.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookingsConfirmedBooking$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsConfirmedBooking$Plain(params: BookingsConfirmedBooking$Plain$Params, context?: HttpContext): Observable<BookingDto> {
    return this.bookingsConfirmedBooking$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /**
   * Confirms an existing booking.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookingsConfirmedBooking()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsConfirmedBooking$Response(params: BookingsConfirmedBooking$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return bookingsConfirmedBooking(this.http, this.rootUrl, params, context);
  }

  /**
   * Confirms an existing booking.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookingsConfirmedBooking$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsConfirmedBooking(params: BookingsConfirmedBooking$Params, context?: HttpContext): Observable<BookingDto> {
    return this.bookingsConfirmedBooking$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /** Path part for operation `bookingsCompletedBooking()` */
  static readonly BookingsCompletedBookingPath = '/api/Bookings/{id}/completed';

  /**
   * Marks an existing booking as completed.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookingsCompletedBooking$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsCompletedBooking$Plain$Response(params: BookingsCompletedBooking$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return bookingsCompletedBooking$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Marks an existing booking as completed.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookingsCompletedBooking$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsCompletedBooking$Plain(params: BookingsCompletedBooking$Plain$Params, context?: HttpContext): Observable<BookingDto> {
    return this.bookingsCompletedBooking$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /**
   * Marks an existing booking as completed.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookingsCompletedBooking()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsCompletedBooking$Response(params: BookingsCompletedBooking$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return bookingsCompletedBooking(this.http, this.rootUrl, params, context);
  }

  /**
   * Marks an existing booking as completed.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookingsCompletedBooking$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookingsCompletedBooking(params: BookingsCompletedBooking$Params, context?: HttpContext): Observable<BookingDto> {
    return this.bookingsCompletedBooking$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

}
