/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BookingDto } from '../models/booking-dto';
import { cancelBooking } from '../fn/bookings/cancel-booking';
import { CancelBooking$Params } from '../fn/bookings/cancel-booking';
import { cancelBooking$Plain } from '../fn/bookings/cancel-booking-plain';
import { CancelBooking$Plain$Params } from '../fn/bookings/cancel-booking-plain';
import { checkInBooking } from '../fn/bookings/check-in-booking';
import { CheckInBooking$Params } from '../fn/bookings/check-in-booking';
import { checkInBooking$Plain } from '../fn/bookings/check-in-booking-plain';
import { CheckInBooking$Plain$Params } from '../fn/bookings/check-in-booking-plain';
import { checkOutBooking } from '../fn/bookings/check-out-booking';
import { CheckOutBooking$Params } from '../fn/bookings/check-out-booking';
import { checkOutBooking$Plain } from '../fn/bookings/check-out-booking-plain';
import { CheckOutBooking$Plain$Params } from '../fn/bookings/check-out-booking-plain';
import { confirmedBooking } from '../fn/bookings/confirmed-booking';
import { ConfirmedBooking$Params } from '../fn/bookings/confirmed-booking';
import { confirmedBooking$Plain } from '../fn/bookings/confirmed-booking-plain';
import { ConfirmedBooking$Plain$Params } from '../fn/bookings/confirmed-booking-plain';
import { createBooking } from '../fn/bookings/create-booking';
import { CreateBooking$Params } from '../fn/bookings/create-booking';
import { createBooking$Plain } from '../fn/bookings/create-booking-plain';
import { CreateBooking$Plain$Params } from '../fn/bookings/create-booking-plain';
import { createBookingByAdmin } from '../fn/bookings/create-booking-by-admin';
import { CreateBookingByAdmin$Params } from '../fn/bookings/create-booking-by-admin';
import { createBookingByAdmin$Plain } from '../fn/bookings/create-booking-by-admin-plain';
import { CreateBookingByAdmin$Plain$Params } from '../fn/bookings/create-booking-by-admin-plain';
import { getBookingById } from '../fn/bookings/get-booking-by-id';
import { GetBookingById$Params } from '../fn/bookings/get-booking-by-id';
import { getBookingById$Plain } from '../fn/bookings/get-booking-by-id-plain';
import { GetBookingById$Plain$Params } from '../fn/bookings/get-booking-by-id-plain';
import { getBookings } from '../fn/bookings/get-bookings';
import { GetBookings$Params } from '../fn/bookings/get-bookings';
import { getBookings$Plain } from '../fn/bookings/get-bookings-plain';
import { GetBookings$Plain$Params } from '../fn/bookings/get-bookings-plain';
import { getUserBookings } from '../fn/bookings/get-user-bookings';
import { GetUserBookings$Params } from '../fn/bookings/get-user-bookings';
import { getUserBookings$Plain } from '../fn/bookings/get-user-bookings-plain';
import { GetUserBookings$Plain$Params } from '../fn/bookings/get-user-bookings-plain';
import { UserBookingsDto } from '../models/user-bookings-dto';

@Injectable({ providedIn: 'root' })
export class BookingsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getBookings()` */
  static readonly GetBookingsPath = '/api/Bookings';

  /**
   * Retrieves all bookings.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBookings$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBookings$Plain$Response(params?: GetBookings$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BookingDto>>> {
    return getBookings$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all bookings.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBookings$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBookings$Plain(params?: GetBookings$Plain$Params, context?: HttpContext): Observable<Array<BookingDto>> {
    return this.getBookings$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<BookingDto>>): Array<BookingDto> => r.body)
    );
  }

  /**
   * Retrieves all bookings.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBookings()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBookings$Response(params?: GetBookings$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BookingDto>>> {
    return getBookings(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all bookings.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBookings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBookings(params?: GetBookings$Params, context?: HttpContext): Observable<Array<BookingDto>> {
    return this.getBookings$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<BookingDto>>): Array<BookingDto> => r.body)
    );
  }

  /** Path part for operation `createBooking()` */
  static readonly CreateBookingPath = '/api/Bookings';

  /**
   * Creates a new booking.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createBooking$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createBooking$Plain$Response(params?: CreateBooking$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return createBooking$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new booking.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createBooking$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createBooking$Plain(params?: CreateBooking$Plain$Params, context?: HttpContext): Observable<BookingDto> {
    return this.createBooking$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /**
   * Creates a new booking.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createBooking()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createBooking$Response(params?: CreateBooking$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return createBooking(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new booking.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createBooking$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createBooking(params?: CreateBooking$Params, context?: HttpContext): Observable<BookingDto> {
    return this.createBooking$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /** Path part for operation `getUserBookings()` */
  static readonly GetUserBookingsPath = '/api/Bookings/user';

  /**
   * Gets all bookings made by the currently authenticated user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserBookings$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserBookings$Plain$Response(params?: GetUserBookings$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserBookingsDto>>> {
    return getUserBookings$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all bookings made by the currently authenticated user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserBookings$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserBookings$Plain(params?: GetUserBookings$Plain$Params, context?: HttpContext): Observable<Array<UserBookingsDto>> {
    return this.getUserBookings$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserBookingsDto>>): Array<UserBookingsDto> => r.body)
    );
  }

  /**
   * Gets all bookings made by the currently authenticated user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserBookings()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserBookings$Response(params?: GetUserBookings$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserBookingsDto>>> {
    return getUserBookings(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all bookings made by the currently authenticated user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserBookings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserBookings(params?: GetUserBookings$Params, context?: HttpContext): Observable<Array<UserBookingsDto>> {
    return this.getUserBookings$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserBookingsDto>>): Array<UserBookingsDto> => r.body)
    );
  }

  /** Path part for operation `getBookingById()` */
  static readonly GetBookingByIdPath = '/api/Bookings/{id}';

  /**
   * Retrieves a booking by its unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBookingById$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBookingById$Plain$Response(params: GetBookingById$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return getBookingById$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves a booking by its unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBookingById$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBookingById$Plain(params: GetBookingById$Plain$Params, context?: HttpContext): Observable<BookingDto> {
    return this.getBookingById$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /**
   * Retrieves a booking by its unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBookingById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBookingById$Response(params: GetBookingById$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return getBookingById(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves a booking by its unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBookingById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBookingById(params: GetBookingById$Params, context?: HttpContext): Observable<BookingDto> {
    return this.getBookingById$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /** Path part for operation `createBookingByAdmin()` */
  static readonly CreateBookingByAdminPath = '/api/Bookings/admin';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createBookingByAdmin$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createBookingByAdmin$Plain$Response(params?: CreateBookingByAdmin$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return createBookingByAdmin$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createBookingByAdmin$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createBookingByAdmin$Plain(params?: CreateBookingByAdmin$Plain$Params, context?: HttpContext): Observable<BookingDto> {
    return this.createBookingByAdmin$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createBookingByAdmin()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createBookingByAdmin$Response(params?: CreateBookingByAdmin$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return createBookingByAdmin(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createBookingByAdmin$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createBookingByAdmin(params?: CreateBookingByAdmin$Params, context?: HttpContext): Observable<BookingDto> {
    return this.createBookingByAdmin$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /** Path part for operation `cancelBooking()` */
  static readonly CancelBookingPath = '/api/Bookings/{id}/cancel';

  /**
   * Cancels an existing booking.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `cancelBooking$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelBooking$Plain$Response(params: CancelBooking$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return cancelBooking$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Cancels an existing booking.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `cancelBooking$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelBooking$Plain(params: CancelBooking$Plain$Params, context?: HttpContext): Observable<BookingDto> {
    return this.cancelBooking$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /**
   * Cancels an existing booking.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `cancelBooking()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelBooking$Response(params: CancelBooking$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return cancelBooking(this.http, this.rootUrl, params, context);
  }

  /**
   * Cancels an existing booking.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `cancelBooking$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelBooking(params: CancelBooking$Params, context?: HttpContext): Observable<BookingDto> {
    return this.cancelBooking$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /** Path part for operation `checkInBooking()` */
  static readonly CheckInBookingPath = '/api/Bookings/{id}/checkin';

  /**
   * Marks a booking as checked in.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `checkInBooking$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  checkInBooking$Plain$Response(params: CheckInBooking$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return checkInBooking$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Marks a booking as checked in.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `checkInBooking$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  checkInBooking$Plain(params: CheckInBooking$Plain$Params, context?: HttpContext): Observable<BookingDto> {
    return this.checkInBooking$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /**
   * Marks a booking as checked in.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `checkInBooking()` instead.
   *
   * This method doesn't expect any request body.
   */
  checkInBooking$Response(params: CheckInBooking$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return checkInBooking(this.http, this.rootUrl, params, context);
  }

  /**
   * Marks a booking as checked in.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `checkInBooking$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  checkInBooking(params: CheckInBooking$Params, context?: HttpContext): Observable<BookingDto> {
    return this.checkInBooking$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /** Path part for operation `checkOutBooking()` */
  static readonly CheckOutBookingPath = '/api/Bookings/{id}/checkout';

  /**
   * Marks a booking as checked out.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `checkOutBooking$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  checkOutBooking$Plain$Response(params: CheckOutBooking$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return checkOutBooking$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Marks a booking as checked out.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `checkOutBooking$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  checkOutBooking$Plain(params: CheckOutBooking$Plain$Params, context?: HttpContext): Observable<BookingDto> {
    return this.checkOutBooking$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /**
   * Marks a booking as checked out.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `checkOutBooking()` instead.
   *
   * This method doesn't expect any request body.
   */
  checkOutBooking$Response(params: CheckOutBooking$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return checkOutBooking(this.http, this.rootUrl, params, context);
  }

  /**
   * Marks a booking as checked out.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `checkOutBooking$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  checkOutBooking(params: CheckOutBooking$Params, context?: HttpContext): Observable<BookingDto> {
    return this.checkOutBooking$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /** Path part for operation `confirmedBooking()` */
  static readonly ConfirmedBookingPath = '/api/Bookings/{id}/confirmed';

  /**
   * Confirms an existing booking.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `confirmedBooking$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  confirmedBooking$Plain$Response(params: ConfirmedBooking$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return confirmedBooking$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Confirms an existing booking.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `confirmedBooking$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  confirmedBooking$Plain(params: ConfirmedBooking$Plain$Params, context?: HttpContext): Observable<BookingDto> {
    return this.confirmedBooking$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

  /**
   * Confirms an existing booking.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `confirmedBooking()` instead.
   *
   * This method doesn't expect any request body.
   */
  confirmedBooking$Response(params: ConfirmedBooking$Params, context?: HttpContext): Observable<StrictHttpResponse<BookingDto>> {
    return confirmedBooking(this.http, this.rootUrl, params, context);
  }

  /**
   * Confirms an existing booking.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `confirmedBooking$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  confirmedBooking(params: ConfirmedBooking$Params, context?: HttpContext): Observable<BookingDto> {
    return this.confirmedBooking$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookingDto>): BookingDto => r.body)
    );
  }

}
