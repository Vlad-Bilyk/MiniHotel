/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { callback } from '../fn/payments/callback';
import { Callback$Params } from '../fn/payments/callback';
import { InvoiceDto } from '../models/invoice-dto';
import { payOffline } from '../fn/payments/pay-offline';
import { PayOffline$Params } from '../fn/payments/pay-offline';
import { payOffline$Plain } from '../fn/payments/pay-offline-plain';
import { PayOffline$Plain$Params } from '../fn/payments/pay-offline-plain';
import { payOnline } from '../fn/payments/pay-online';
import { PayOnline$Params } from '../fn/payments/pay-online';
import { payOnline$Plain } from '../fn/payments/pay-online-plain';
import { PayOnline$Plain$Params } from '../fn/payments/pay-online-plain';
import { refund } from '../fn/payments/refund';
import { Refund$Params } from '../fn/payments/refund';
import { refund$Plain } from '../fn/payments/refund-plain';
import { Refund$Plain$Params } from '../fn/payments/refund-plain';

@Injectable({ providedIn: 'root' })
export class PaymentsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `payOnline()` */
  static readonly PayOnlinePath = '/api/Payments/{invoiceId}/online';

  /**
   * Initiates an online payment by generating a payment URL.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `payOnline$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  payOnline$Plain$Response(params: PayOnline$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return payOnline$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Initiates an online payment by generating a payment URL.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `payOnline$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  payOnline$Plain(params: PayOnline$Plain$Params, context?: HttpContext): Observable<string> {
    return this.payOnline$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /**
   * Initiates an online payment by generating a payment URL.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `payOnline()` instead.
   *
   * This method doesn't expect any request body.
   */
  payOnline$Response(params: PayOnline$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return payOnline(this.http, this.rootUrl, params, context);
  }

  /**
   * Initiates an online payment by generating a payment URL.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `payOnline$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  payOnline(params: PayOnline$Params, context?: HttpContext): Observable<string> {
    return this.payOnline$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `payOffline()` */
  static readonly PayOfflinePath = '/api/Payments/{invoiceId}/offline';

  /**
   * Processes an offline payment, marking the invoice as paid offline.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `payOffline$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  payOffline$Plain$Response(params: PayOffline$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return payOffline$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Processes an offline payment, marking the invoice as paid offline.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `payOffline$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  payOffline$Plain(params: PayOffline$Plain$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.payOffline$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /**
   * Processes an offline payment, marking the invoice as paid offline.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `payOffline()` instead.
   *
   * This method doesn't expect any request body.
   */
  payOffline$Response(params: PayOffline$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return payOffline(this.http, this.rootUrl, params, context);
  }

  /**
   * Processes an offline payment, marking the invoice as paid offline.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `payOffline$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  payOffline(params: PayOffline$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.payOffline$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /** Path part for operation `callback()` */
  static readonly CallbackPath = '/api/Payments/callback';

  /**
   * Receives and processes LiqPay callback data.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `callback()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  callback$Response(params?: Callback$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return callback(this.http, this.rootUrl, params, context);
  }

  /**
   * Receives and processes LiqPay callback data.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `callback$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  callback(params?: Callback$Params, context?: HttpContext): Observable<void> {
    return this.callback$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `refund()` */
  static readonly RefundPath = '/api/Payments/{invoiceId}/refund';

  /**
   * Processes a refund request for a specific invoice.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `refund$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  refund$Plain$Response(params: Refund$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return refund$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Processes a refund request for a specific invoice.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `refund$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  refund$Plain(params: Refund$Plain$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.refund$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /**
   * Processes a refund request for a specific invoice.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `refund()` instead.
   *
   * This method doesn't expect any request body.
   */
  refund$Response(params: Refund$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return refund(this.http, this.rootUrl, params, context);
  }

  /**
   * Processes a refund request for a specific invoice.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `refund$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  refund(params: Refund$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.refund$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

}
