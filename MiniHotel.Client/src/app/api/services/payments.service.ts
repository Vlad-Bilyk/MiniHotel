/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { InvoiceDto } from '../models/invoice-dto';
import { paymentsCallback } from '../fn/payments/payments-callback';
import { PaymentsCallback$Params } from '../fn/payments/payments-callback';
import { paymentsPayOffline } from '../fn/payments/payments-pay-offline';
import { PaymentsPayOffline$Params } from '../fn/payments/payments-pay-offline';
import { paymentsPayOffline$Plain } from '../fn/payments/payments-pay-offline-plain';
import { PaymentsPayOffline$Plain$Params } from '../fn/payments/payments-pay-offline-plain';
import { paymentsPayOnline } from '../fn/payments/payments-pay-online';
import { PaymentsPayOnline$Params } from '../fn/payments/payments-pay-online';
import { paymentsRefund } from '../fn/payments/payments-refund';
import { PaymentsRefund$Params } from '../fn/payments/payments-refund';
import { paymentsRefund$Plain } from '../fn/payments/payments-refund-plain';
import { PaymentsRefund$Plain$Params } from '../fn/payments/payments-refund-plain';

@Injectable({ providedIn: 'root' })
export class PaymentsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `paymentsPayOnline()` */
  static readonly PaymentsPayOnlinePath = '/api/Payments/{invoiceId}/online';

  /**
   * Initiates an online payment by generating a payment URL.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `paymentsPayOnline()` instead.
   *
   * This method doesn't expect any request body.
   */
  paymentsPayOnline$Response(params: PaymentsPayOnline$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return paymentsPayOnline(this.http, this.rootUrl, params, context);
  }

  /**
   * Initiates an online payment by generating a payment URL.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `paymentsPayOnline$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  paymentsPayOnline(params: PaymentsPayOnline$Params, context?: HttpContext): Observable<void> {
    return this.paymentsPayOnline$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `paymentsPayOffline()` */
  static readonly PaymentsPayOfflinePath = '/api/Payments/{invoiceId}/offline';

  /**
   * Processes an offline payment, marking the invoice as paid offline.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `paymentsPayOffline$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  paymentsPayOffline$Plain$Response(params: PaymentsPayOffline$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return paymentsPayOffline$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Processes an offline payment, marking the invoice as paid offline.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `paymentsPayOffline$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  paymentsPayOffline$Plain(params: PaymentsPayOffline$Plain$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.paymentsPayOffline$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /**
   * Processes an offline payment, marking the invoice as paid offline.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `paymentsPayOffline()` instead.
   *
   * This method doesn't expect any request body.
   */
  paymentsPayOffline$Response(params: PaymentsPayOffline$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return paymentsPayOffline(this.http, this.rootUrl, params, context);
  }

  /**
   * Processes an offline payment, marking the invoice as paid offline.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `paymentsPayOffline$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  paymentsPayOffline(params: PaymentsPayOffline$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.paymentsPayOffline$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /** Path part for operation `paymentsCallback()` */
  static readonly PaymentsCallbackPath = '/api/Payments/callback';

  /**
   * Receives and processes LiqPay callback data.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `paymentsCallback()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  paymentsCallback$Response(params?: PaymentsCallback$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return paymentsCallback(this.http, this.rootUrl, params, context);
  }

  /**
   * Receives and processes LiqPay callback data.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `paymentsCallback$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  paymentsCallback(params?: PaymentsCallback$Params, context?: HttpContext): Observable<void> {
    return this.paymentsCallback$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `paymentsRefund()` */
  static readonly PaymentsRefundPath = '/api/Payments/{invoiceId}/refund';

  /**
   * Processes a refund request for a specific invoice.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `paymentsRefund$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  paymentsRefund$Plain$Response(params: PaymentsRefund$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return paymentsRefund$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Processes a refund request for a specific invoice.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `paymentsRefund$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  paymentsRefund$Plain(params: PaymentsRefund$Plain$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.paymentsRefund$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /**
   * Processes a refund request for a specific invoice.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `paymentsRefund()` instead.
   *
   * This method doesn't expect any request body.
   */
  paymentsRefund$Response(params: PaymentsRefund$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return paymentsRefund(this.http, this.rootUrl, params, context);
  }

  /**
   * Processes a refund request for a specific invoice.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `paymentsRefund$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  paymentsRefund(params: PaymentsRefund$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.paymentsRefund$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

}
