/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createRoomType } from '../fn/room-types/create-room-type';
import { CreateRoomType$Params } from '../fn/room-types/create-room-type';
import { createRoomType$Plain } from '../fn/room-types/create-room-type-plain';
import { CreateRoomType$Plain$Params } from '../fn/room-types/create-room-type-plain';
import { deleteRoomType } from '../fn/room-types/delete-room-type';
import { DeleteRoomType$Params } from '../fn/room-types/delete-room-type';
import { getRoomType } from '../fn/room-types/get-room-type';
import { GetRoomType$Params } from '../fn/room-types/get-room-type';
import { getRoomTypes } from '../fn/room-types/get-room-types';
import { GetRoomTypes$Params } from '../fn/room-types/get-room-types';
import { getRoomTypes$Plain } from '../fn/room-types/get-room-types-plain';
import { GetRoomTypes$Plain$Params } from '../fn/room-types/get-room-types-plain';
import { RoomTypeDto } from '../models/room-type-dto';
import { updateRoomType } from '../fn/room-types/update-room-type';
import { UpdateRoomType$Params } from '../fn/room-types/update-room-type';

@Injectable({ providedIn: 'root' })
export class RoomTypesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getRoomTypes()` */
  static readonly GetRoomTypesPath = '/api/RoomTypes';

  /**
   * Retrieves all hotel room types.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRoomTypes$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoomTypes$Plain$Response(params?: GetRoomTypes$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RoomTypeDto>>> {
    return getRoomTypes$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all hotel room types.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRoomTypes$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoomTypes$Plain(params?: GetRoomTypes$Plain$Params, context?: HttpContext): Observable<Array<RoomTypeDto>> {
    return this.getRoomTypes$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RoomTypeDto>>): Array<RoomTypeDto> => r.body)
    );
  }

  /**
   * Retrieves all hotel room types.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRoomTypes()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoomTypes$Response(params?: GetRoomTypes$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RoomTypeDto>>> {
    return getRoomTypes(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all hotel room types.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRoomTypes$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoomTypes(params?: GetRoomTypes$Params, context?: HttpContext): Observable<Array<RoomTypeDto>> {
    return this.getRoomTypes$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RoomTypeDto>>): Array<RoomTypeDto> => r.body)
    );
  }

  /** Path part for operation `createRoomType()` */
  static readonly CreateRoomTypePath = '/api/RoomTypes';

  /**
   * Creates a new room type.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createRoomType$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createRoomType$Plain$Response(params?: CreateRoomType$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<RoomTypeDto>> {
    return createRoomType$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new room type.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createRoomType$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createRoomType$Plain(params?: CreateRoomType$Plain$Params, context?: HttpContext): Observable<RoomTypeDto> {
    return this.createRoomType$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoomTypeDto>): RoomTypeDto => r.body)
    );
  }

  /**
   * Creates a new room type.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createRoomType()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createRoomType$Response(params?: CreateRoomType$Params, context?: HttpContext): Observable<StrictHttpResponse<RoomTypeDto>> {
    return createRoomType(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new room type.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createRoomType$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createRoomType(params?: CreateRoomType$Params, context?: HttpContext): Observable<RoomTypeDto> {
    return this.createRoomType$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoomTypeDto>): RoomTypeDto => r.body)
    );
  }

  /** Path part for operation `getRoomType()` */
  static readonly GetRoomTypePath = '/api/RoomTypes/{id}';

  /**
   * Retrieves a room type by its unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRoomType()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoomType$Response(params: GetRoomType$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return getRoomType(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves a room type by its unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRoomType$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRoomType(params: GetRoomType$Params, context?: HttpContext): Observable<void> {
    return this.getRoomType$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateRoomType()` */
  static readonly UpdateRoomTypePath = '/api/RoomTypes/{id}';

  /**
   * Updates an existing room type.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateRoomType()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  updateRoomType$Response(params: UpdateRoomType$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateRoomType(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates an existing room type.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateRoomType$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  updateRoomType(params: UpdateRoomType$Params, context?: HttpContext): Observable<void> {
    return this.updateRoomType$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteRoomType()` */
  static readonly DeleteRoomTypePath = '/api/RoomTypes/{id}';

  /**
   * Deletes a room type by its unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteRoomType()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRoomType$Response(params: DeleteRoomType$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteRoomType(this.http, this.rootUrl, params, context);
  }

  /**
   * Deletes a room type by its unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteRoomType$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRoomType(params: DeleteRoomType$Params, context?: HttpContext): Observable<void> {
    return this.deleteRoomType$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
