/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addInvoiceItem } from '../fn/invoices/add-invoice-item';
import { AddInvoiceItem$Params } from '../fn/invoices/add-invoice-item';
import { addInvoiceItem$Plain } from '../fn/invoices/add-invoice-item-plain';
import { AddInvoiceItem$Plain$Params } from '../fn/invoices/add-invoice-item-plain';
import { createInvoice } from '../fn/invoices/create-invoice';
import { CreateInvoice$Params } from '../fn/invoices/create-invoice';
import { createInvoice$Plain } from '../fn/invoices/create-invoice-plain';
import { CreateInvoice$Plain$Params } from '../fn/invoices/create-invoice-plain';
import { getInvoiceByBookingId } from '../fn/invoices/get-invoice-by-booking-id';
import { GetInvoiceByBookingId$Params } from '../fn/invoices/get-invoice-by-booking-id';
import { getInvoiceByBookingId$Plain } from '../fn/invoices/get-invoice-by-booking-id-plain';
import { GetInvoiceByBookingId$Plain$Params } from '../fn/invoices/get-invoice-by-booking-id-plain';
import { getInvoices } from '../fn/invoices/get-invoices';
import { GetInvoices$Params } from '../fn/invoices/get-invoices';
import { getInvoices$Plain } from '../fn/invoices/get-invoices-plain';
import { GetInvoices$Plain$Params } from '../fn/invoices/get-invoices-plain';
import { InvoiceDto } from '../models/invoice-dto';
import { removeInvoiceItem } from '../fn/invoices/remove-invoice-item';
import { RemoveInvoiceItem$Params } from '../fn/invoices/remove-invoice-item';
import { updateInvoiceStatus } from '../fn/invoices/update-invoice-status';
import { UpdateInvoiceStatus$Params } from '../fn/invoices/update-invoice-status';
import { updateInvoiceStatus$Plain } from '../fn/invoices/update-invoice-status-plain';
import { UpdateInvoiceStatus$Plain$Params } from '../fn/invoices/update-invoice-status-plain';

@Injectable({ providedIn: 'root' })
export class InvoicesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getInvoices()` */
  static readonly GetInvoicesPath = '/api/Invoices';

  /**
   * Retrieves all invoices.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getInvoices$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInvoices$Plain$Response(params?: GetInvoices$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<InvoiceDto>>> {
    return getInvoices$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all invoices.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getInvoices$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInvoices$Plain(params?: GetInvoices$Plain$Params, context?: HttpContext): Observable<Array<InvoiceDto>> {
    return this.getInvoices$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<InvoiceDto>>): Array<InvoiceDto> => r.body)
    );
  }

  /**
   * Retrieves all invoices.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getInvoices()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInvoices$Response(params?: GetInvoices$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<InvoiceDto>>> {
    return getInvoices(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all invoices.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getInvoices$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInvoices(params?: GetInvoices$Params, context?: HttpContext): Observable<Array<InvoiceDto>> {
    return this.getInvoices$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<InvoiceDto>>): Array<InvoiceDto> => r.body)
    );
  }

  /** Path part for operation `getInvoiceByBookingId()` */
  static readonly GetInvoiceByBookingIdPath = '/api/Invoices/{bookingId}';

  /**
   * Retrieves an invoice by booking unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getInvoiceByBookingId$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInvoiceByBookingId$Plain$Response(params: GetInvoiceByBookingId$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return getInvoiceByBookingId$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves an invoice by booking unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getInvoiceByBookingId$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInvoiceByBookingId$Plain(params: GetInvoiceByBookingId$Plain$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.getInvoiceByBookingId$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /**
   * Retrieves an invoice by booking unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getInvoiceByBookingId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInvoiceByBookingId$Response(params: GetInvoiceByBookingId$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return getInvoiceByBookingId(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves an invoice by booking unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getInvoiceByBookingId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInvoiceByBookingId(params: GetInvoiceByBookingId$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.getInvoiceByBookingId$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /** Path part for operation `createInvoice()` */
  static readonly CreateInvoicePath = '/api/Invoices/{bookingId}';

  /**
   * Creates an invoice for a specific booking.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createInvoice$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  createInvoice$Plain$Response(params: CreateInvoice$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return createInvoice$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates an invoice for a specific booking.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createInvoice$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  createInvoice$Plain(params: CreateInvoice$Plain$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.createInvoice$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /**
   * Creates an invoice for a specific booking.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createInvoice()` instead.
   *
   * This method doesn't expect any request body.
   */
  createInvoice$Response(params: CreateInvoice$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return createInvoice(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates an invoice for a specific booking.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createInvoice$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  createInvoice(params: CreateInvoice$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.createInvoice$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /** Path part for operation `addInvoiceItem()` */
  static readonly AddInvoiceItemPath = '/api/Invoices/{bookingId}/items';

  /**
   * Adds an invoice item to a specific booking's invoice.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addInvoiceItem$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  addInvoiceItem$Plain$Response(params: AddInvoiceItem$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return addInvoiceItem$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Adds an invoice item to a specific booking's invoice.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addInvoiceItem$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  addInvoiceItem$Plain(params: AddInvoiceItem$Plain$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.addInvoiceItem$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /**
   * Adds an invoice item to a specific booking's invoice.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addInvoiceItem()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  addInvoiceItem$Response(params: AddInvoiceItem$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return addInvoiceItem(this.http, this.rootUrl, params, context);
  }

  /**
   * Adds an invoice item to a specific booking's invoice.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addInvoiceItem$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  addInvoiceItem(params: AddInvoiceItem$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.addInvoiceItem$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /** Path part for operation `removeInvoiceItem()` */
  static readonly RemoveInvoiceItemPath = '/api/Invoices/items/{id}';

  /**
   * Removes an invoice item by its unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeInvoiceItem()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeInvoiceItem$Response(params: RemoveInvoiceItem$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return removeInvoiceItem(this.http, this.rootUrl, params, context);
  }

  /**
   * Removes an invoice item by its unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeInvoiceItem$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeInvoiceItem(params: RemoveInvoiceItem$Params, context?: HttpContext): Observable<void> {
    return this.removeInvoiceItem$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateInvoiceStatus()` */
  static readonly UpdateInvoiceStatusPath = '/api/Invoices/{id}/status';

  /**
   * Updates the status of an invoice.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateInvoiceStatus$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateInvoiceStatus$Plain$Response(params: UpdateInvoiceStatus$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return updateInvoiceStatus$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates the status of an invoice.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateInvoiceStatus$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateInvoiceStatus$Plain(params: UpdateInvoiceStatus$Plain$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.updateInvoiceStatus$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /**
   * Updates the status of an invoice.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateInvoiceStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateInvoiceStatus$Response(params: UpdateInvoiceStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return updateInvoiceStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates the status of an invoice.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateInvoiceStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateInvoiceStatus(params: UpdateInvoiceStatus$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.updateInvoiceStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

}
