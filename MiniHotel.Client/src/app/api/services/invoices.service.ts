/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { InvoiceDto } from '../models/invoice-dto';
import { invoicesAddInvoiceItem } from '../fn/invoices/invoices-add-invoice-item';
import { InvoicesAddInvoiceItem$Params } from '../fn/invoices/invoices-add-invoice-item';
import { invoicesAddInvoiceItem$Plain } from '../fn/invoices/invoices-add-invoice-item-plain';
import { InvoicesAddInvoiceItem$Plain$Params } from '../fn/invoices/invoices-add-invoice-item-plain';
import { invoicesCreateInvoice } from '../fn/invoices/invoices-create-invoice';
import { InvoicesCreateInvoice$Params } from '../fn/invoices/invoices-create-invoice';
import { invoicesCreateInvoice$Plain } from '../fn/invoices/invoices-create-invoice-plain';
import { InvoicesCreateInvoice$Plain$Params } from '../fn/invoices/invoices-create-invoice-plain';
import { invoicesGetInvoice } from '../fn/invoices/invoices-get-invoice';
import { InvoicesGetInvoice$Params } from '../fn/invoices/invoices-get-invoice';
import { invoicesGetInvoice$Plain } from '../fn/invoices/invoices-get-invoice-plain';
import { InvoicesGetInvoice$Plain$Params } from '../fn/invoices/invoices-get-invoice-plain';
import { invoicesGetInvoices } from '../fn/invoices/invoices-get-invoices';
import { InvoicesGetInvoices$Params } from '../fn/invoices/invoices-get-invoices';
import { invoicesGetInvoices$Plain } from '../fn/invoices/invoices-get-invoices-plain';
import { InvoicesGetInvoices$Plain$Params } from '../fn/invoices/invoices-get-invoices-plain';
import { invoicesRemoveInvoiceItem } from '../fn/invoices/invoices-remove-invoice-item';
import { InvoicesRemoveInvoiceItem$Params } from '../fn/invoices/invoices-remove-invoice-item';
import { invoicesUpdateStatus } from '../fn/invoices/invoices-update-status';
import { InvoicesUpdateStatus$Params } from '../fn/invoices/invoices-update-status';
import { invoicesUpdateStatus$Plain } from '../fn/invoices/invoices-update-status-plain';
import { InvoicesUpdateStatus$Plain$Params } from '../fn/invoices/invoices-update-status-plain';

@Injectable({ providedIn: 'root' })
export class InvoicesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `invoicesGetInvoices()` */
  static readonly InvoicesGetInvoicesPath = '/api/Invoices';

  /**
   * Retrieves all invoices.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoicesGetInvoices$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoicesGetInvoices$Plain$Response(params?: InvoicesGetInvoices$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<InvoiceDto>>> {
    return invoicesGetInvoices$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all invoices.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoicesGetInvoices$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoicesGetInvoices$Plain(params?: InvoicesGetInvoices$Plain$Params, context?: HttpContext): Observable<Array<InvoiceDto>> {
    return this.invoicesGetInvoices$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<InvoiceDto>>): Array<InvoiceDto> => r.body)
    );
  }

  /**
   * Retrieves all invoices.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoicesGetInvoices()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoicesGetInvoices$Response(params?: InvoicesGetInvoices$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<InvoiceDto>>> {
    return invoicesGetInvoices(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves all invoices.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoicesGetInvoices$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoicesGetInvoices(params?: InvoicesGetInvoices$Params, context?: HttpContext): Observable<Array<InvoiceDto>> {
    return this.invoicesGetInvoices$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<InvoiceDto>>): Array<InvoiceDto> => r.body)
    );
  }

  /** Path part for operation `invoicesGetInvoice()` */
  static readonly InvoicesGetInvoicePath = '/api/Invoices/{id}';

  /**
   * Retrieves an invoice by its unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoicesGetInvoice$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoicesGetInvoice$Plain$Response(params: InvoicesGetInvoice$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return invoicesGetInvoice$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves an invoice by its unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoicesGetInvoice$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoicesGetInvoice$Plain(params: InvoicesGetInvoice$Plain$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.invoicesGetInvoice$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /**
   * Retrieves an invoice by its unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoicesGetInvoice()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoicesGetInvoice$Response(params: InvoicesGetInvoice$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return invoicesGetInvoice(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves an invoice by its unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoicesGetInvoice$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoicesGetInvoice(params: InvoicesGetInvoice$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.invoicesGetInvoice$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /** Path part for operation `invoicesCreateInvoice()` */
  static readonly InvoicesCreateInvoicePath = '/api/Invoices/{bookingId}';

  /**
   * Creates an invoice for a specific booking.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoicesCreateInvoice$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoicesCreateInvoice$Plain$Response(params: InvoicesCreateInvoice$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return invoicesCreateInvoice$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates an invoice for a specific booking.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoicesCreateInvoice$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoicesCreateInvoice$Plain(params: InvoicesCreateInvoice$Plain$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.invoicesCreateInvoice$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /**
   * Creates an invoice for a specific booking.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoicesCreateInvoice()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoicesCreateInvoice$Response(params: InvoicesCreateInvoice$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return invoicesCreateInvoice(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates an invoice for a specific booking.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoicesCreateInvoice$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoicesCreateInvoice(params: InvoicesCreateInvoice$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.invoicesCreateInvoice$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /** Path part for operation `invoicesAddInvoiceItem()` */
  static readonly InvoicesAddInvoiceItemPath = '/api/Invoices/{bookingId}/items';

  /**
   * Adds an invoice item to a specific booking's invoice.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoicesAddInvoiceItem$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  invoicesAddInvoiceItem$Plain$Response(params: InvoicesAddInvoiceItem$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return invoicesAddInvoiceItem$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Adds an invoice item to a specific booking's invoice.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoicesAddInvoiceItem$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  invoicesAddInvoiceItem$Plain(params: InvoicesAddInvoiceItem$Plain$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.invoicesAddInvoiceItem$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /**
   * Adds an invoice item to a specific booking's invoice.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoicesAddInvoiceItem()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  invoicesAddInvoiceItem$Response(params: InvoicesAddInvoiceItem$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return invoicesAddInvoiceItem(this.http, this.rootUrl, params, context);
  }

  /**
   * Adds an invoice item to a specific booking's invoice.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoicesAddInvoiceItem$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  invoicesAddInvoiceItem(params: InvoicesAddInvoiceItem$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.invoicesAddInvoiceItem$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /** Path part for operation `invoicesRemoveInvoiceItem()` */
  static readonly InvoicesRemoveInvoiceItemPath = '/api/Invoices/items/{id}';

  /**
   * Removes an invoice item by its unique identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoicesRemoveInvoiceItem()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoicesRemoveInvoiceItem$Response(params: InvoicesRemoveInvoiceItem$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return invoicesRemoveInvoiceItem(this.http, this.rootUrl, params, context);
  }

  /**
   * Removes an invoice item by its unique identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoicesRemoveInvoiceItem$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoicesRemoveInvoiceItem(params: InvoicesRemoveInvoiceItem$Params, context?: HttpContext): Observable<void> {
    return this.invoicesRemoveInvoiceItem$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `invoicesUpdateStatus()` */
  static readonly InvoicesUpdateStatusPath = '/api/Invoices/{id}/status';

  /**
   * Updates the status of an invoice.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoicesUpdateStatus$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoicesUpdateStatus$Plain$Response(params: InvoicesUpdateStatus$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return invoicesUpdateStatus$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates the status of an invoice.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoicesUpdateStatus$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoicesUpdateStatus$Plain(params: InvoicesUpdateStatus$Plain$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.invoicesUpdateStatus$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

  /**
   * Updates the status of an invoice.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoicesUpdateStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoicesUpdateStatus$Response(params: InvoicesUpdateStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceDto>> {
    return invoicesUpdateStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates the status of an invoice.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoicesUpdateStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoicesUpdateStatus(params: InvoicesUpdateStatus$Params, context?: HttpContext): Observable<InvoiceDto> {
    return this.invoicesUpdateStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceDto>): InvoiceDto => r.body)
    );
  }

}
